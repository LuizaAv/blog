{"version":3,"sources":["Components/Loginform/Login/Loginform.js","Components/Infostation/Infostation.js","Components/Postcreation/Postscreation.js","Components/Postcreation/PostsDone.js","App.js","serviceWorker.js","index.js"],"names":["Loginform","props","namechangeHandler","event","nameChange","target","value","passwordchangeHandler","passwordChange","className","placeholder","this","name","onChange","type","password","Component","Infostation","onClick","window","location","href","Postscreation","titleChange","titleChangeHandler","contentChange","contentChangeHandler","onFocus","onBlur","Posts","title","content","time","App","to","exact","path","component","PostsDone","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAwCeA,G,kBApCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAIVC,kBAAoB,SAACC,GACnB,EAAKF,MAAMG,WAAWD,EAAME,OAAOC,QANnB,EASpBC,sBAAwB,SAACJ,GACrB,EAAKF,MAAMO,eAAeL,EAAME,OAAOC,QAVvB,E,sEAclB,OACE,yBAAKG,UAAU,aACb,sCACA,2BACAC,YAAY,WACZJ,MAAOK,KAAKV,MAAMW,KAClBC,SAAUF,KAAKT,oBAEf,2BACAQ,YAAY,eACZI,KAAK,WACLR,MAAOK,KAAKV,MAAMc,SAClBF,SAAUF,KAAKJ,wBAEf,4BAAQO,KAAK,SAASL,UAAU,aAAhC,e,GA7BgBO,c,MCcTC,MAdf,WACE,OACE,6BACE,gEACA,uBAAIR,UAAU,iBACZ,uBAAGS,QAAU,SAAAf,GAAK,OAAIgB,OAAOC,SAASC,KAAO,WAC3C,sCACG,IAHP,mCC0CSC,G,kBA7Cb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KAGRsB,YAAc,SAAApB,GACZ,EAAKF,MAAMuB,mBAAmBrB,EAAME,OAAOC,QAL1B,EAQnBmB,cAAgB,SAAAtB,GACd,EAAKF,MAAMyB,qBAAqBvB,EAAME,OAAOC,QAT5B,E,sEAiBjB,OACE,yBAAKG,UAAU,gBACb,kDACA,8BACEA,UAAU,OACVC,YAAY,UACZiB,QAAS,SAAAxB,GAAK,OACXA,EAAME,OAAOK,YAAb,iCAGHkB,OAAQ,SAAAzB,GAAK,OAAKA,EAAME,OAAOK,YAAc,WAC7CG,SAAUF,KAAKY,cAEjB,8BACEd,UAAU,OACVC,YAAY,YACZiB,QAAS,SAAAxB,GAAK,OACXA,EAAME,OAAOK,YAAb,sDAGHkB,OAAQ,SAAAzB,GAAK,OAAKA,EAAME,OAAOK,YAAc,aAC7CG,SAAUF,KAAKc,qB,GAvCGT,cCYba,MAZf,SAAe5B,GACX,OACI,yBAAKQ,UAAU,YACb,yBAAKA,UAAU,UAAf,KACA,2BAAIR,EAAM6B,OACV,2BAAI7B,EAAM8B,SACV,2BAAI9B,EAAM+B,Q,cC2BLC,MA5Bf,WACE,OACE,kBAAC,IAAD,KACE,6BACA,wBAAIxB,UAAU,UACV,4BACE,kBAAC,IAAD,CAAMyB,GAAG,IAAIzB,UAAU,YAAvB,SAGF,4BACE,kBAAC,IAAD,CAAMyB,GAAG,gBAAgBzB,UAAU,YAAnC,qBAGF,4BACE,kBAAC,IAAD,CAAMyB,GAAG,SAASzB,UAAU,YAA5B,YAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,gBAAgBC,UAAWf,IAC7C,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,SAASC,UAAWrC,IACtC,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,SAASC,UAAWC,QCjB5BC,QACW,cAA7BpB,OAAOC,SAASoB,UAEe,UAA7BrB,OAAOC,SAASoB,UAEhBrB,OAAOC,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9aa40760.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Loginform.css\";\r\n\r\nclass Loginform extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n    }\r\n\r\n    namechangeHandler = (event) => {\r\n      this.props.nameChange(event.target.value)\r\n  }\r\n\r\n  passwordchangeHandler = (event) => {\r\n      this.props.passwordChange(event.target.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loginMain\">\r\n        <h4>Log In</h4>\r\n        <input \r\n        placeholder=\"Name ...\" \r\n        value={this.props.name}\r\n        onChange={this.namechangeHandler}\r\n        />\r\n        <input \r\n        placeholder=\"Password ...\" \r\n        type=\"password\"\r\n        value={this.props.password}\r\n        onChange={this.passwordchangeHandler}\r\n         />\r\n        <button type=\"submit\" className=\"logSubmit\">\r\n          Log in\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loginform;\r\n","import React from \"react\";\r\nimport './infostation.css';\r\n\r\nfunction Infostation() {\r\n  return (\r\n    <div>\r\n      <h5>There is no posts on made by You</h5>\r\n      <p  className='infoParagragh'>\r\n        <a onClick= {event => window.location.href = \"/login\"}>\r\n          <u>Log In</u>\r\n        </a>{' '}\r\n        and be our first story teller\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Infostation;\r\n","import React, { Component } from \"react\";\r\nimport \"./posts.css\";\r\n\r\nclass Postscreation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  titleChange = event => {\r\n    this.props.titleChangeHandler(event.target.value);\r\n  };\r\n\r\n  contentChange = event => {\r\n    this.props.contentChangeHandler(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    const checkBox = {\r\n      fontSize: \"25px\",\r\n      color: \"rgb(1, 48, 13)\"\r\n    };\r\n    return (\r\n      <div className=\"postsContent\">\r\n        <h5>Tell us your story</h5>\r\n        <textarea\r\n          className=\"text\"\r\n          placeholder=\"Title *\"\r\n          onFocus={event =>\r\n            (event.target.placeholder = `Title\r\n                  ....`)\r\n          }\r\n          onBlur={event => (event.target.placeholder = \"Title *\")}\r\n          onChange={this.titleChange}\r\n        ></textarea>\r\n        <textarea\r\n          className=\"text\"\r\n          placeholder=\"Content *\"\r\n          onFocus={event =>\r\n            (event.target.placeholder = `Content  \r\n                    ....Write your post`)\r\n          }\r\n          onBlur={event => (event.target.placeholder = \"Content *\")}\r\n          onChange={this.contentChange}\r\n        ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Postscreation;\r\n","import React from 'react';\r\nimport './posts.css';\r\n\r\nfunction Posts(props) {\r\n    return (\r\n        <div className='postCard'>\r\n          <div className='circle'>L</div>\r\n          <p>{props.title}</p>  \r\n          <p>{props.content}</p>\r\n          <p>{props.time}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Posts","import React from \"react\";\nimport \"./App.css\";\nimport Loginform  from './Components/Loginform/Login/Loginform';\nimport Infostation from './Components/Infostation/Infostation';\nimport Postscreation from './Components/Postcreation/Postscreation';\nimport PostsDone from './Components/Postcreation/PostsDone';\nimport { Link, Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n      <ul className=\"navBar\">\n          <li>\n            <Link to=\"/\" className=\"navbarLi\">Blog</Link>\n          </li>\n\n          <li>\n            <Link to=\"/postcreation\" className=\"navbarLi\">Create your post</Link>\n          </li>\n\n          <li>\n            <Link to=\"/login\" className=\"navbarLi\">Log In</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route exact path=\"/\" component={Infostation}></Route>\n          <Route exact path=\"/postcreation\" component={Postscreation}></Route>\n          <Route exact path='/login' component={Loginform}></Route>\n          <Route exact path='/posts' component={PostsDone}></Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}