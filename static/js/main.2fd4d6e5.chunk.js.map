{"version":3,"sources":["Components/Loginform/Login/Loginform.js","Components/Infostation/Infostation.js","Components/Postcreation/Postscreation.js","Components/Postcreation/PostsDone.js","App.js","serviceWorker.js","index.js"],"names":["Loginform","props","namechangeHandler","event","nameChange","target","value","passwordchangeHandler","passwordChange","clickHandler","alert","name","className","placeholder","this","onChange","type","password","onClick","Component","Infostation","window","location","href","Postscreation","handlePostValue","e","setState","post","postValue","goToPosts","pushPostToPosts","state","history","push","onFocus","onBlur","withRouter","Posts","posts","map","index","key","App","console","log","to","exact","path","component","PostsDone","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAiDeA,G,wBA7CX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAIVC,kBAAoB,SAACC,GACnB,EAAKF,MAAMG,WAAWD,EAAME,OAAOC,QANnB,EASpBC,sBAAwB,SAACJ,GACrB,EAAKF,MAAMO,eAAeL,EAAME,OAAOC,QAVvB,EAapBG,aAAe,SAACN,GACdO,MAAM,GAAD,OAAI,EAAKT,MAAMU,KAAf,YAda,E,sEAkBlB,OACE,yBAAKC,UAAU,aACb,sCACA,2BACAC,YAAY,WACZP,MAAOQ,KAAKb,MAAMU,KAClBI,SAAUD,KAAKZ,oBAGf,2BACAW,YAAY,eACZG,KAAK,WACLV,MAAOQ,KAAKb,MAAMgB,SAClBF,SAAUD,KAAKP,wBAGf,4BACAS,KAAK,SACLJ,UAAU,YACVM,QAAWJ,KAAKL,cAHhB,e,GAnCgBU,c,MCcTC,MAdf,WACE,OACE,6BACE,gEACA,uBAAIR,UAAU,iBACZ,uBAAGM,QAAU,SAAAf,GAAK,OAAIkB,OAAOC,SAASC,KAAO,WAC3C,sCACG,IAHP,mC,eCHAC,E,YACJ,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRwB,gBAAkB,SAACC,GAChB,EAAKC,SAAS,CACZC,KAAO,CAACC,UAAYH,EAAErB,OAAOC,UATf,EAanBwB,UAAY,WACT,EAAK7B,MAAM8B,gBAAgB,EAAKC,MAAMJ,MACtC,EAAK3B,MAAMgC,QAAQC,KAAK,WAbzB,EAAKF,MAAM,CACTJ,KAAO,IAHQ,E,sEAwBjB,OACE,yBAAKhB,UAAU,gBACb,kDAEA,8BACEA,UAAU,OACVC,YAAY,YACZsB,QAAS,SAAAhC,GAAK,OACXA,EAAME,OAAOQ,YAAb,sDAGHuB,OAAQ,SAAAjC,GAAK,OAAKA,EAAME,OAAOQ,YAAc,aAC7CE,SAAUD,KAAKW,kBAEjB,4BACGb,UAAU,YACVM,QAASJ,KAAKgB,WAFjB,e,GAvCoBX,aA+CbkB,cAAWb,GC9BXc,MAlBf,SAAerC,GACX,OACE,6BACGA,EAAMsC,MAAMC,KAAK,SAACZ,EAAOa,GACxB,OACE,yBAAK7B,UAAU,WAAW8B,IAAKD,GAC7B,yBAAK7B,UAAU,UAAf,KACA,2BAAIgB,EAAKC,iB,QC8CRc,E,YA/Cb,aAAc,IAAD,8BACX,+CAMFZ,gBAAkB,SAACH,GAChB,EAAKD,UAAS,gBAAEY,EAAF,EAAEA,MAAF,MAAY,CACxBA,MAAK,sBAAOA,GAAP,CAAeX,SAPvB,EAAKI,MAAM,CACTO,MAAQ,IAHC,E,sEAeb,OADEK,QAAQC,IAAI/B,KAAKkB,MAAMO,OAEvB,kBAAC,IAAD,KACE,6BACA,wBAAI3B,UAAU,UACV,4BACE,kBAAC,IAAD,CAAMkC,GAAG,IAAIlC,UAAU,YAAvB,SAGF,4BACE,kBAAC,IAAD,CAAMkC,GAAG,gBAAgBlC,UAAU,YAAnC,qBAGF,4BACE,kBAAC,IAAD,CAAMkC,GAAG,SAASlC,UAAU,YAA5B,YAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,iBAChB,kBAAC,EAAD,CAAejB,gBAAiBjB,KAAKiB,mBAEvC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASC,UAAWjD,IACtC,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,UAChB,kBAACE,EAAD,CAAWX,MAAOzB,KAAKkB,MAAMO,gB,GAvCvBY,IAAMhC,WCIJiC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2fd4d6e5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Loginform.css\";\r\n\r\nclass Loginform extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n    }\r\n\r\n    namechangeHandler = (event) => {\r\n      this.props.nameChange(event.target.value)\r\n  }\r\n\r\n  passwordchangeHandler = (event) => {\r\n      this.props.passwordChange(event.target.value)\r\n  }\r\n\r\n  clickHandler = (event) => {\r\n    alert(`${this.props.name} heloo`)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loginMain\">\r\n        <h4>Log In</h4>\r\n        <input \r\n        placeholder=\"Name ...\" \r\n        value={this.props.name}\r\n        onChange={this.namechangeHandler}\r\n        />\r\n        \r\n        <input \r\n        placeholder=\"Password ...\" \r\n        type=\"password\"\r\n        value={this.props.password}\r\n        onChange={this.passwordchangeHandler}\r\n         />\r\n        \r\n        <button \r\n        type=\"submit\" \r\n        className=\"logSubmit\"\r\n        onClick = {this.clickHandler}>\r\n          Log in\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loginform;\r\n","import React from \"react\";\r\nimport './infostation.css';\r\n\r\nfunction Infostation() {\r\n  return (\r\n    <div>\r\n      <h5>There is no posts on made by You</h5>\r\n      <p  className='infoParagragh'>\r\n        <a onClick= {event => window.location.href = \"/login\"}>\r\n          <u>Log In</u>\r\n        </a>{' '}\r\n        and be our first story teller\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Infostation;\r\n","import React, { Component } from \"react\";\r\nimport \"./posts.css\";\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass Postscreation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      post : {}\r\n    }\r\n  }\r\n\r\n  handlePostValue = (e) =>{\r\n     this.setState({\r\n       post : {postValue : e.target.value}\r\n     })\r\n  }\r\n\r\n  goToPosts = () =>{\r\n     this.props.pushPostToPosts(this.state.post)\r\n     this.props.history.push('/posts')\r\n  }\r\n\r\n  render() {\r\n    //console.log('post', this.state.post)\r\n    const checkBox = {\r\n      fontSize: \"25px\",\r\n      color: \"rgb(1, 48, 13)\"\r\n    };\r\n    return (\r\n      <div className=\"postsContent\">\r\n        <h5>Tell us your story</h5>\r\n\r\n        <textarea\r\n          className=\"text\"\r\n          placeholder=\"Content *\"\r\n          onFocus={event =>\r\n            (event.target.placeholder = `Content  \r\n                    ....Write your post`)\r\n          }\r\n          onBlur={event => (event.target.placeholder = \"Content *\")}\r\n          onChange={this.handlePostValue}\r\n        ></textarea>\r\n        <button \r\n           className='submitBtn'\r\n           onClick={this.goToPosts}>Submit</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Postscreation);\r\n","import React from 'react';\r\nimport './posts.css';\r\n\r\nfunction Posts(props) {\r\n    return (\r\n      <div>\r\n        {props.posts.map( (post , index) =>{\r\n          return(\r\n            <div className='postCard' key={index}>\r\n              <div className='circle'>L</div>  \r\n              <p>{post.postValue}</p>\r\n            </div>\r\n          )\r\n          \r\n        })}\r\n      </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default Posts","import React from \"react\";\nimport \"./App.css\";\nimport Loginform  from './Components/Loginform/Login/Loginform';\nimport Infostation from './Components/Infostation/Infostation';\nimport Postscreation from './Components/Postcreation/Postscreation';\nimport PostsDone from './Components/Postcreation/PostsDone';\nimport { Link, Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      posts : [], \n    }\n  }\n\n  pushPostToPosts = (post) =>{\n     this.setState(({posts})=>({\n       posts : [...posts , post]\n     }))\n  }\n\n  render(){\n    console.log(this.state.posts)\n  return (\n    <Router>\n      <div>\n      <ul className=\"navBar\">\n          <li>\n            <Link to=\"/\" className=\"navbarLi\">Blog</Link>\n          </li>\n\n          <li>\n            <Link to=\"/postcreation\" className=\"navbarLi\">Create your post</Link>\n          </li>\n\n          <li>\n            <Link to=\"/login\" className=\"navbarLi\">Log In</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route exact path=\"/\" component={Infostation}></Route>\n          <Route exact path=\"/postcreation\">\n            <Postscreation pushPostToPosts={this.pushPostToPosts}/>\n          </Route>\n          <Route exact path='/login' component={Loginform}></Route>\n          <Route exact path='/posts'>\n            <PostsDone posts={this.state.posts}/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}